// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  require(["jquery", "backbone", "knob", "speechbubble"], function($, Backbone, KnobView, SpeechBubbleView) {
    return $(document).ready(function() {
      var Addition, AudioNodeBase, DiodeNode, InversionNode, Oscillator, PassThroughNode, SamplePlayer, audioContext, bubble1, bubble2, bubble3, bubble4, distortionKnob, outAddition, outMerger1, outMerger2, outSplitter, player, speedKnob, vIn, vInAddition1, vInAddition2, vInCrossSplitter, vInDelay1, vInDelay2, vInDiode1, vInDiode2, vInGain, vInInverter1, vInInverter2, vInInverter3, vInMerger1, vInMerger2, vInSplitter1, vInSplitter2, vInSplitter3, vInSplitter4, vInSplitter5, vcAddition1, vcAddition2, vcDelay1, vcDelay2, vcDiode1, vcDiode2, vcInverter1, vcMerger1, vcMerger2, vcSplitter1, vcSplitter2, vcSplitter3, vcSplitter4,
        _this = this;
      if (typeof webkitAudioContext === 'undefined' && typeof AudioContext === 'undefined') {
        alert('Your browser does not support the Web Audio API. Try Google Chrome or a Webkit nightly build');
      }
      AudioNodeBase = (function() {

        function AudioNodeBase() {}

        AudioNodeBase.prototype.connect = function(destination) {
          var d;
          if (typeof destination.node === 'object') {
            d = destination.node;
          } else {
            d = destination;
          }
          console.log(d);
          return this.node.connect(d);
        };

        return AudioNodeBase;

      })();
      SamplePlayer = (function(_super) {

        __extends(SamplePlayer, _super);

        function SamplePlayer(context) {
          this.context = context;
        }

        SamplePlayer.prototype.play = function() {
          this.stop();
          this.source = this.context.createBufferSource();
          this.source.buffer = this.buffer;
          this.source.loop = true;
          this.source.connect(this.destination);
          return this.source.noteOn(0);
        };

        SamplePlayer.prototype.stop = function() {
          if (this.source) {
            this.source.noteOff(0);
            return this.source.disconnect;
          }
        };

        SamplePlayer.prototype.connect = function(destination) {
          if (typeof destination.node === 'object') {
            return this.destination = destination.node;
          } else {
            return this.destination = destination;
          }
        };

        SamplePlayer.prototype.loadBuffer = function(url) {
          var request, self,
            _this = this;
          self = this;
          request = new XMLHttpRequest();
          request.open('GET', url, true);
          request.responseType = 'arraybuffer';
          request.onload = function() {
            var onerror, onsuccess;
            onsuccess = function(buffer) {
              self.buffer = buffer;
              return self.trigger('bufferLoaded');
            };
            onerror = function() {
              return alert("Could not load " + self.url);
            };
            return _this.context.decodeAudioData(request.response, onsuccess, onerror);
          };
          return request.send();
        };

        return SamplePlayer;

      })(Backbone.View);
      Oscillator = (function() {

        function Oscillator(context, frequency) {
          var _this = this;
          this.context = context;
          this.node = this.context.createJavaScriptNode(1024, 1, 1);
          this.node.onaudioprocess = function(e) {
            return _this.process(e);
          };
          this.phase = 0;
          this.frequency = frequency;
          this.sample_rate = this.context.sampleRate;
          this.amplitude = 1;
          this.counter = 0;
        }

        Oscillator.prototype.process = function(e) {
          var data, i, sample, _i, _ref, _results;
          data = e.outputBuffer.getChannelData(0);
          _results = [];
          for (i = _i = 0, _ref = data.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
            sample = this.amplitude * Math.sin(this.phase);
            data[i] = sample;
            _results.push(this.phase = this.phase + ((2 * Math.PI * this.frequency) / this.sample_rate));
          }
          return _results;
        };

        return Oscillator;

      })();
      InversionNode = (function(_super) {

        __extends(InversionNode, _super);

        function InversionNode(context) {
          var _this = this;
          this.context = context;
          this.node = this.context.createJavaScriptNode(1024, 1, 1);
          this.node.onaudioprocess = function(e) {
            return _this.process(e);
          };
        }

        InversionNode.prototype.process = function(e) {
          var i, input0_data, output0_data, _i, _ref, _results;
          input0_data = e.inputBuffer.getChannelData(0);
          output0_data = e.outputBuffer.getChannelData(0);
          _results = [];
          for (i = _i = 0, _ref = output0_data.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
            _results.push(output0_data[i] = -1 * input0_data[i]);
          }
          return _results;
        };

        return InversionNode;

      })(AudioNodeBase);
      DiodeNode = (function(_super) {

        __extends(DiodeNode, _super);

        function DiodeNode(context) {
          this.context = context;
          this.node = this.context.createWaveShaper();
          this.vb = 0.2;
          this.vl = 0.4;
          this.h = 1;
          this.setCurve();
        }

        DiodeNode.prototype.setDistortion = function(distortion) {
          this.vb = distortion;
          return this.setCurve();
        };

        DiodeNode.prototype.setCurve = function() {
          var i, samples, v, value, wsCurve, _i, _ref;
          samples = 1024;
          wsCurve = new Float32Array(samples);
          for (i = _i = 0, _ref = wsCurve.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
            v = (i - samples / 2) / (samples / 2);
            v = Math.abs(v);
            if (v <= this.vb) {
              value = 0;
            } else if ((this.vb < v) && (v <= this.vl)) {
              value = this.h * ((Math.pow(v - this.vb, 2)) / (2 * this.vl - 2 * this.vb));
            } else {
              value = this.h * v - this.h * this.vl + (this.h * ((Math.pow(this.vl - this.vb, 2)) / (2 * this.vl - 2 * this.vb)));
            }
            wsCurve[i] = value;
          }
          return this.node.curve = wsCurve;
        };

        return DiodeNode;

      })(AudioNodeBase);
      PassThroughNode = (function(_super) {

        __extends(PassThroughNode, _super);

        function PassThroughNode(context) {
          var _this = this;
          this.context = context;
          this.node = this.context.createJavaScriptNode(1024, 1, 1);
          this.node.onaudioprocess = function(e) {
            return _this.process(e);
          };
        }

        PassThroughNode.prototype.process = function(e) {
          var i, input0_data, output0_data, _i, _ref, _results;
          input0_data = e.inputBuffer.getChannelData(0);
          output0_data = e.outputBuffer.getChannelData(0);
          _results = [];
          for (i = _i = 0, _ref = output0_data.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
            _results.push(output0_data[i] = input0_data[i]);
          }
          return _results;
        };

        return PassThroughNode;

      })(AudioNodeBase);
      Addition = (function(_super) {

        __extends(Addition, _super);

        function Addition(context) {
          var _this = this;
          this.context = context;
          this.node = this.context.createJavaScriptNode(1024, 2, 1);
          this.node.onaudioprocess = function(e) {
            return _this.process(e);
          };
        }

        Addition.prototype.process = function(e) {
          var datain0, datain1, dataout0, i, _i, _ref, _results;
          datain0 = e.inputBuffer.getChannelData(0);
          datain1 = e.inputBuffer.getChannelData(1);
          dataout0 = e.outputBuffer.getChannelData(0);
          _results = [];
          for (i = _i = 0, _ref = dataout0.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
            _results.push(dataout0[i] = datain0[i] + datain1[i]);
          }
          return _results;
        };

        return Addition;

      })(AudioNodeBase);
      audioContext = new webkitAudioContext;
      vIn = new Oscillator(audioContext, 30);
      vInGain = audioContext.createGainNode();
      vInGain.gain.value = 0.5;
      vInSplitter1 = audioContext.createChannelSplitter();
      vInDelay1 = new PassThroughNode(audioContext);
      vInInverter1 = new InversionNode(audioContext);
      vInSplitter2 = audioContext.createChannelSplitter();
      vInMerger1 = audioContext.createChannelMerger();
      vInAddition1 = new Addition(audioContext);
      vInDelay2 = new PassThroughNode(audioContext);
      vInInverter2 = new InversionNode(audioContext);
      vInDiode1 = new DiodeNode(audioContext);
      vInDiode2 = new DiodeNode(audioContext);
      vInSplitter3 = audioContext.createChannelSplitter();
      vInSplitter4 = audioContext.createChannelSplitter();
      vInMerger2 = audioContext.createChannelMerger();
      vInAddition2 = new Addition(audioContext);
      vInInverter3 = new InversionNode(audioContext);
      vInSplitter5 = audioContext.createChannelSplitter();
      vInCrossSplitter = audioContext.createChannelSplitter();
      player = new SamplePlayer(audioContext);
      vcSplitter1 = audioContext.createChannelSplitter();
      vcMerger1 = audioContext.createChannelMerger();
      vcAddition1 = new Addition(audioContext);
      vcDelay1 = new PassThroughNode(audioContext);
      vcInverter1 = new InversionNode(audioContext);
      vcDiode1 = new DiodeNode(audioContext);
      vcDiode2 = new DiodeNode(audioContext);
      vcSplitter2 = audioContext.createChannelSplitter();
      vcSplitter3 = audioContext.createChannelSplitter();
      vcMerger2 = audioContext.createChannelMerger();
      vcAddition2 = new Addition(audioContext);
      vcDelay2 = new PassThroughNode(audioContext);
      vcSplitter4 = audioContext.createChannelSplitter();
      outMerger1 = audioContext.createChannelMerger();
      outAddition = new Addition(audioContext);
      outSplitter = audioContext.createChannelSplitter();
      outMerger2 = audioContext.createChannelMerger();
      player.connect(vcSplitter1);
      vcSplitter1.connect(vcMerger1);
      vcMerger1.connect(vcAddition1.node);
      vIn.node.connect(vInGain);
      vInGain.connect(vInSplitter1);
      vInSplitter1.connect(vInInverter1.node);
      vInInverter1.connect(vInSplitter2);
      vInSplitter2.connect(vInMerger1, 0, 0);
      vInMerger1.connect(vInAddition1.node);
      vcSplitter1.connect(vInMerger1, 0, 1);
      vInGain.connect(vInDelay1.node);
      vInDelay1.connect(vInCrossSplitter);
      vInCrossSplitter.connect(vcMerger1, 0, 1);
      vcAddition1.connect(vcDelay1.node);
      vcDelay1.connect(vcDiode1.node);
      vcDiode1.connect(vcSplitter2);
      vcSplitter2.connect(vcMerger2, 0, 0);
      vcAddition1.connect(vcInverter1.node);
      vcInverter1.connect(vcDiode2.node);
      vcDiode2.connect(vcSplitter3);
      vcSplitter3.connect(vcMerger2, 0, 1);
      vcMerger2.connect(vcAddition2.node);
      vcAddition2.connect(vcDelay2.node);
      vcDelay2.connect(vcSplitter4);
      vcSplitter4.connect(outMerger1, 0, 0);
      vInAddition1.connect(vInDelay2.node);
      vInDelay2.connect(vInDiode1.node);
      vInDiode1.connect(vInSplitter3);
      vInSplitter3.connect(vInMerger2, 0, 0);
      vInAddition1.connect(vInInverter2.node);
      vInInverter2.connect(vInDiode2.node);
      vInDiode2.connect(vInSplitter4);
      vInSplitter4.connect(vInMerger2, 0, 1);
      vInMerger2.connect(vInAddition2.node);
      vInAddition2.connect(vInInverter3.node);
      vInInverter3.connect(vInSplitter5);
      vInSplitter5.connect(outMerger1, 0, 1);
      outMerger1.connect(outAddition.node);
      outAddition.connect(outSplitter);
      outSplitter.connect(outMerger2, 0, 0);
      outSplitter.connect(outMerger2, 0, 1);
      outMerger2.connect(audioContext.destination);
      bubble1 = new SpeechBubbleView({
        el: $("#voice1")
      });
      bubble2 = new SpeechBubbleView({
        el: $("#voice2")
      });
      bubble3 = new SpeechBubbleView({
        el: $("#voice3")
      });
      bubble4 = new SpeechBubbleView({
        el: $("#voice4")
      });
      speedKnob = new KnobView({
        el: $("#tape-speed"),
        initial_value: 0.01
      });
      distortionKnob = new KnobView({
        el: $("#mod-distortion"),
        initial_value: 0.4
      });
      speedKnob.on('valueChanged', function(v) {
        var speed;
        speed = v * (10 - 2000) + 10;
        return vIn.frequency = speed;
      });
      distortionKnob.on('valueChanged', function(v) {
        return _.each([vInDiode1, vInDiode2, vcDiode1, vcDiode2], function(diode) {
          return diode.setDistortion(v);
        });
      });
      bubble1.on('on', function() {
        _.each([bubble2, bubble3, bubble4], function(o) {
          return o.turnOff();
        });
        player.loadBuffer("/audio/ringmod_exterminate.wav");
        return player.on('bufferLoaded', function() {
          return player.play();
        });
      });
      bubble1.on('off', function() {
        return player.stop();
      });
      bubble2.on('on', function() {
        _.each([bubble1, bubble3, bubble4], function(o) {
          return o.turnOff();
        });
        player.loadBuffer("/audio/ringmod_good-dalek.wav");
        return player.on('bufferLoaded', function() {
          return player.play();
        });
      });
      bubble2.on('off', function() {
        return player.stop();
      });
      bubble3.on('on', function() {
        _.each([bubble1, bubble2, bubble4], function(o) {
          return o.turnOff();
        });
        player.loadBuffer("/audio/ringmod_upgrading.wav");
        return player.on('bufferLoaded', function() {
          return player.play();
        });
      });
      bubble3.on('off', function() {
        return player.stop();
      });
      bubble4.on('on', function() {
        _.each([bubble1, bubble2, bubble3], function(o) {
          return o.turnOff();
        });
        player.loadBuffer("/audio/ringmod_delete.wav");
        return player.on('bufferLoaded', function() {
          return player.play();
        });
      });
      return bubble4.on('off', function() {
        return player.stop();
      });
    });
  });

}).call(this);
