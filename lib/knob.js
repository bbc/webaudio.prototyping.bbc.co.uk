// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['backbone'], function() {
    var KnobView;
    return KnobView = (function(_super) {

      __extends(KnobView, _super);

      function KnobView() {
        this.mousemove = __bind(this.mousemove, this);
        return KnobView.__super__.constructor.apply(this, arguments);
      }

      KnobView.prototype.events = {
        "mousedown": "mousedown"
      };

      KnobView.prototype.initialize = function(params) {
        this.knob = $(params.el);
        this.degMin = params.degMin || -45;
        this.degMax = params.degMax || 225;
        this.valueMin = params.valueMin || 0;
        this.valueMax = params.valueMax || 1;
        this.value = params.initial_value || 0.5;
        this.distanceMax = params.distanceMax || 200;
        return this.setValue(this.value);
      };

      KnobView.prototype.mousedown = function(e) {
        this.valueOnMouseDown = this.value;
        this.cursorLocationOnMouseDown = {
          x: e.pageX,
          y: e.pageY
        };
        $(document).on('mousemove.rem', this.mousemove);
        return $(document).on('mouseup.rem', this.removeEvents);
      };

      KnobView.prototype.removeEvents = function() {
        return $(document).off('.rem');
      };

      KnobView.prototype.mousemove = function(e) {
        var distance, value;
        distance = this.calculateDistance(e.pageX, e.pageY);
        value = this.distanceToValue(distance);
        return this.setValue(this.valueOnMouseDown + value);
      };

      KnobView.prototype.calculateDistance = function(x, y) {
        return this.cursorLocationOnMouseDown.y - y;
      };

      KnobView.prototype.distanceToValue = function(distance) {
        var value;
        distance = Math.min(distance, this.distanceMax);
        value = (distance / this.distanceMax) * (this.valueMax - this.valueMin);
        return value;
      };

      KnobView.prototype.valueToDeg = function(value) {
        return this.degMin + ((value / (this.valueMax - this.valueMin)) * this.deltaDeg());
      };

      KnobView.prototype.deltaDeg = function() {
        return this.degMax - this.degMin;
      };

      KnobView.prototype.setValue = function(value) {
        if (value > this.valueMax) {
          value = this.valueMax;
        }
        if (value < this.valueMin) {
          value = this.valueMin;
        }
        this.value = value;
        this.setKnobRotation(this.valueToDeg(value));
        this.trigger('valueChanged', value);
        return true;
      };

      KnobView.prototype.setKnobRotation = function(deg) {
        return this.knob.css('-webkit-transform', 'rotate(' + (deg - 90) + 'deg)');
      };

      return KnobView;

    })(Backbone.View);
  });

}).call(this);
