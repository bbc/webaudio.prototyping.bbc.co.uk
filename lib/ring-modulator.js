// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  require(["jquery", "backbone", "knob", "speechbubble"], function($, Backbone, KnobView, SpeechBubbleView) {
    return $(document).ready(function() {
      var AudioNodeBase, DiodeNode, SamplePlayer, audioContext, bubble1, bubble2, bubble3, bubble4, distortionKnob, player, speedKnob, vIn, vInDiode1, vInDiode2, vInGain, vInInverter1, vInInverter2, vInInverter3, vcDiode3, vcDiode4, vcInverter1,
        _this = this;
      if (typeof webkitAudioContext === 'undefined' && typeof AudioContext === 'undefined') {
        alert('Your browser does not support the Web Audio API. Try Google Chrome or a Webkit nightly build');
      }
      AudioNodeBase = (function() {

        function AudioNodeBase() {}

        AudioNodeBase.prototype.connect = function(destination) {
          var d;
          if (typeof destination.node === 'object') {
            d = destination.node;
          } else {
            d = destination;
          }
          return this.node.connect(d);
        };

        return AudioNodeBase;

      })();
      SamplePlayer = (function(_super) {

        __extends(SamplePlayer, _super);

        function SamplePlayer(context) {
          this.context = context;
        }

        SamplePlayer.prototype.play = function() {
          this.stop();
          this.source = this.context.createBufferSource();
          this.source.buffer = this.buffer;
          this.source.loop = true;
          this.source.connect(this.destination);
          return this.source.noteOn(0);
        };

        SamplePlayer.prototype.stop = function() {
          if (this.source) {
            this.source.noteOff(0);
            return this.source.disconnect;
          }
        };

        SamplePlayer.prototype.connect = function(destination) {
          if (typeof destination.node === 'object') {
            return this.destination = destination.node;
          } else {
            return this.destination = destination;
          }
        };

        SamplePlayer.prototype.loadBuffer = function(url) {
          var request, self,
            _this = this;
          self = this;
          request = new XMLHttpRequest();
          request.open('GET', url, true);
          request.responseType = 'arraybuffer';
          request.onload = function() {
            var onerror, onsuccess;
            onsuccess = function(buffer) {
              self.buffer = buffer;
              return self.trigger('bufferLoaded');
            };
            onerror = function() {
              return alert("Could not load " + self.url);
            };
            return _this.context.decodeAudioData(request.response, onsuccess, onerror);
          };
          return request.send();
        };

        return SamplePlayer;

      })(Backbone.View);
      DiodeNode = (function(_super) {

        __extends(DiodeNode, _super);

        function DiodeNode(context) {
          this.context = context;
          this.node = this.context.createWaveShaper();
          this.vb = 0.2;
          this.vl = 0.4;
          this.h = 1;
          this.setCurve();
        }

        DiodeNode.prototype.setDistortion = function(distortion) {
          this.vb = distortion;
          return this.setCurve();
        };

        DiodeNode.prototype.setCurve = function() {
          var i, samples, v, value, wsCurve, _i, _ref;
          samples = 1024;
          wsCurve = new Float32Array(samples);
          for (i = _i = 0, _ref = wsCurve.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
            v = (i - samples / 2) / (samples / 2);
            v = Math.abs(v);
            if (v <= this.vb) {
              value = 0;
            } else if ((this.vb < v) && (v <= this.vl)) {
              value = this.h * ((Math.pow(v - this.vb, 2)) / (2 * this.vl - 2 * this.vb));
            } else {
              value = this.h * v - this.h * this.vl + (this.h * ((Math.pow(this.vl - this.vb, 2)) / (2 * this.vl - 2 * this.vb)));
            }
            wsCurve[i] = value;
          }
          return this.node.curve = wsCurve;
        };

        return DiodeNode;

      })(AudioNodeBase);
      audioContext = new webkitAudioContext;
      vIn = audioContext.createOscillator();
      vIn.frequency.value = 30;
      vIn.noteOn(0);
      vInGain = audioContext.createGainNode();
      vInGain.gain.value = 0.5;
      vInInverter1 = audioContext.createGainNode();
      vInInverter1.gain.value = -1;
      vInInverter2 = audioContext.createGainNode();
      vInInverter2.gain.value = -1;
      vInDiode1 = new DiodeNode(audioContext);
      vInDiode2 = new DiodeNode(audioContext);
      vInInverter3 = audioContext.createGainNode();
      vInInverter3.gain.value = -1;
      player = new SamplePlayer(audioContext);
      vcInverter1 = audioContext.createGainNode();
      vcInverter1.gain.value = -1;
      vcDiode3 = new DiodeNode(audioContext);
      vcDiode4 = new DiodeNode(audioContext);
      player.connect(vcInverter1);
      player.connect(vcDiode4);
      console.debug();
      vcInverter1.connect(vcDiode3.node);
      vIn.connect(vInGain);
      vInGain.connect(vInInverter1);
      vInGain.connect(vcInverter1);
      vInGain.connect(vcDiode4.node);
      vInInverter1.connect(vInInverter2);
      vInInverter1.connect(vInDiode2.node);
      vInInverter2.connect(vInDiode1.node);
      vInDiode1.connect(vInInverter3);
      vInDiode2.connect(vInInverter3);
      vInInverter3.connect(audioContext.destination);
      vcDiode3.connect(audioContext.destination);
      vcDiode4.connect(audioContext.destination);
      bubble1 = new SpeechBubbleView({
        el: $("#voice1")
      });
      bubble2 = new SpeechBubbleView({
        el: $("#voice2")
      });
      bubble3 = new SpeechBubbleView({
        el: $("#voice3")
      });
      bubble4 = new SpeechBubbleView({
        el: $("#voice4")
      });
      speedKnob = new KnobView({
        el: "#tape-speed",
        initial_value: 30,
        valueMin: 0,
        valueMax: 2000
      });
      distortionKnob = new KnobView({
        el: $("#mod-distortion"),
        initial_value: 0.4
      });
      speedKnob.on('valueChanged', function(v) {
        return vIn.frequency.value = v;
      });
      distortionKnob.on('valueChanged', function(v) {
        return _.each([vInDiode1, vInDiode2, vcDiode3, vcDiode4], function(diode) {
          return diode.setDistortion(v);
        });
      });
      bubble1.on('on', function() {
        _.each([bubble2, bubble3, bubble4], function(o) {
          return o.turnOff();
        });
        player.loadBuffer("/audio/ringmod_exterminate.wav");
        return player.on('bufferLoaded', function() {
          return player.play();
        });
      });
      bubble1.on('off', function() {
        return player.stop();
      });
      bubble2.on('on', function() {
        _.each([bubble1, bubble3, bubble4], function(o) {
          return o.turnOff();
        });
        player.loadBuffer("/audio/ringmod_good-dalek.wav");
        return player.on('bufferLoaded', function() {
          return player.play();
        });
      });
      bubble2.on('off', function() {
        return player.stop();
      });
      bubble3.on('on', function() {
        _.each([bubble1, bubble2, bubble4], function(o) {
          return o.turnOff();
        });
        player.loadBuffer("/audio/ringmod_upgrading.wav");
        return player.on('bufferLoaded', function() {
          return player.play();
        });
      });
      bubble3.on('off', function() {
        return player.stop();
      });
      bubble4.on('on', function() {
        _.each([bubble1, bubble2, bubble3], function(o) {
          return o.turnOff();
        });
        player.loadBuffer("/audio/ringmod_delete.wav");
        return player.on('bufferLoaded', function() {
          return player.play();
        });
      });
      return bubble4.on('off', function() {
        return player.stop();
      });
    });
  });

}).call(this);
