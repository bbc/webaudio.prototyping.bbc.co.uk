// Generated by CoffeeScript 1.3.3
(function() {

  require(["jquery", "backbone", "knob", "switch"], function($, Backbone, KnobView, SwitchView) {
    return $(document).ready(function() {
      var ModulatedOscillator, audioContext, frequency_knob, initialFrequency, initialModulationDepth, initialModulationFrequency, modulation_depth_knob, modulation_frequency_knob, on_off_switch, oscillator, volume_knob;
      if (typeof webkitAudioContext === 'undefined' && typeof AudioContext === 'undefined') {
        alert('Your browser does not support the Web Audio API');
      }
      ModulatedOscillator = (function() {

        function ModulatedOscillator(context) {
          this.oscillator = context.createOscillator();
          this.modulator = context.createOscillator();
          this.modulation_gain = context.createGainNode();
          this.master_gain = context.createGainNode();
          this.modulator.connect(this.modulation_gain);
          this.modulation_gain.connect(this.oscillator.frequency);
          this.oscillator.connect(this.master_gain);
          this.master_gain.connect(context.destination);
          this.oscillator.noteOn(0);
          this.modulator.noteOn(0);
          this.turned_on = true;
        }

        ModulatedOscillator.prototype.setFrequency = function(value) {
          return this.oscillator.frequency.value = value;
        };

        ModulatedOscillator.prototype.setModulationDepth = function(value) {
          return this.modulation_gain.gain.value = value;
        };

        ModulatedOscillator.prototype.setModulationFrequency = function(value) {
          return this.modulator.frequency.value = value;
        };

        ModulatedOscillator.prototype.setMasterGain = function(value) {
          this.gain = value;
          if (this.turned_on) {
            return this.master_gain.gain.value = this.gain;
          }
        };

        ModulatedOscillator.prototype.on = function() {
          this.turned_on = true;
          return this.master_gain.gain.value = 1;
        };

        ModulatedOscillator.prototype.off = function() {
          this.turned_on = false;
          return this.master_gain.gain.value = 0;
        };

        return ModulatedOscillator;

      })();
      audioContext = new webkitAudioContext;
      oscillator = new ModulatedOscillator(audioContext);
      initialFrequency = 440;
      initialModulationDepth = 100;
      initialModulationFrequency = 10;
      oscillator.setFrequency(initialFrequency);
      oscillator.setModulationDepth(initialModulationDepth);
      oscillator.setModulationFrequency(initialModulationFrequency);
      oscillator.off();
      on_off_switch = new SwitchView({
        el: '#switch'
      });
      frequency_knob = new KnobView({
        el: '#frequency',
        degMin: -53,
        degMax: 227,
        valueMin: 50,
        valueMax: 5000,
        initial_value: initialFrequency
      });
      modulation_frequency_knob = new KnobView({
        el: '#modulation-frequency',
        valueMin: 0,
        valueMax: 50,
        initial_value: initialModulationFrequency
      });
      modulation_depth_knob = new KnobView({
        el: '#modulation-depth',
        valueMin: 0,
        valueMax: 200,
        initial_value: initialModulationDepth
      });
      volume_knob = new KnobView({
        el: '#volume',
        initial_value: 1
      });
      frequency_knob.on('valueChanged', function(v) {
        return oscillator.setFrequency(v);
      });
      modulation_frequency_knob.on('valueChanged', function(v) {
        return oscillator.setModulationFrequency(v);
      });
      modulation_depth_knob.on('valueChanged', function(v) {
        return oscillator.setModulationDepth(v);
      });
      volume_knob.on('valueChanged', function(v) {
        return oscillator.setMasterGain(v);
      });
      on_off_switch.on('on', function() {
        oscillator.on();
        return $('#bulb').removeClass('off').addClass('on');
      });
      return on_off_switch.on('off', function() {
        oscillator.off();
        return $('#bulb').removeClass('on').addClass('off');
      });
    });
  });

}).call(this);
