// Generated by CoffeeScript 1.3.3
(function() {

  require(["jquery", "backbone", "knob", "switch"], function($, Backbone, KnobView, SwitchView) {
    return $(document).ready(function() {
      var ModulatedOscillator, audioContext, frequency_knob, initialFrequency, modulation_depth_knob, modulation_frequency_knob, on_off_switch, oscillator, volume_knob;
      if (typeof webkitAudioContext === 'undefined' && typeof AudioContext === 'undefined') {
        alert('Your browser does not support the Web Audio API');
      }
      ModulatedOscillator = (function() {

        function ModulatedOscillator(context) {
          this.oscillator = context.createOscillator();
          this.modulator = context.createOscillator();
          this.modulation_gain = context.createGainNode();
          this.master_gain = context.createGainNode();
          this.modulator.connect(this.modulation_gain);
          this.modulation_gain.connect(this.oscillator.frequency);
          this.oscillator.connect(this.master_gain);
          this.master_gain.connect(context.destination);
          this.oscillator.noteOn(0);
          this.modulator.noteOn(0);
        }

        ModulatedOscillator.prototype.setFrequency = function(value) {
          return this.oscillator.frequency.value = value;
        };

        ModulatedOscillator.prototype.setModulationAmplitude = function(value) {
          return this.modulation_gain.gain.value = value;
        };

        ModulatedOscillator.prototype.setModulationFrequency = function(value) {
          return this.modulator.frequency.value = value;
        };

        ModulatedOscillator.prototype.setMasterGain = function(value) {
          return this.master_gain.gain.value = value;
        };

        ModulatedOscillator.prototype.on = function() {
          return this.setMasterGain(1);
        };

        ModulatedOscillator.prototype.off = function() {
          return this.setMasterGain(0);
        };

        return ModulatedOscillator;

      })();
      audioContext = new webkitAudioContext;
      oscillator = new ModulatedOscillator(audioContext);
      initialFrequency = 440;
      oscillator.setFrequency(initialFrequency);
      oscillator.setModulationAmplitude(10);
      oscillator.setModulationFrequency(5);
      oscillator.off();
      on_off_switch = new SwitchView({
        el: '#switch'
      });
      frequency_knob = new KnobView({
        el: '#frequency',
        degMin: -53,
        degMax: 227,
        initial_value: (initialFrequency - 50) / (5000 - 50)
      });
      modulation_frequency_knob = new KnobView({
        el: '#modulation-frequency',
        initial_value: 0.5 / 50
      });
      modulation_depth_knob = new KnobView({
        el: '#modulation-depth',
        initial_value: 0.5 / 50
      });
      volume_knob = new KnobView({
        el: '#volume'
      });
      frequency_knob.on('valueChanged', function(v) {
        return oscillator.setFrequency((5000 - 50) * v + 50);
      });
      modulation_frequency_knob.on('valueChanged', function(v) {
        return oscillator.setModulationFrequency(50 * v);
      });
      modulation_depth_knob.on('valueChanged', function(v) {
        return oscillator.setModulationAmplitude(50 * v);
      });
      volume_knob.on('valueChanged', function(v) {
        return oscillator.setMasterGain(v);
      });
      on_off_switch.on('on', function() {
        oscillator.on();
        return $('#bulb').removeClass('off').addClass('on');
      });
      return on_off_switch.on('off', function() {
        oscillator.off();
        return $('#bulb').removeClass('on').addClass('off');
      });
    });
  });

}).call(this);
