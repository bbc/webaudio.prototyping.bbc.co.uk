// Generated by CoffeeScript 1.3.3
(function() {

  require(["jquery", "backbone", "knob", "switch"], function($, Backbone, KnobView, SwitchView) {
    return $(document).ready(function() {
      var ModulatedOscillator, audioContext, frequency_knob, modulation_depth_knob, modulation_frequency_knob, on_off_switch, oscillator, volume_knob;
      if (typeof webkitAudioContext === 'undefined' && typeof AudioContext === 'undefined') {
        alert('Your browser does not support the Web Audio API. Try Google Chrome or a Webkit nightly build');
      }
      ModulatedOscillator = (function() {

        function ModulatedOscillator(context) {
          var _this = this;
          this.context = context;
          this.node = this.context.createJavaScriptNode(1024, 2, 2);
          this.node.onaudioprocess = function(e) {
            return _this.process(e);
          };
          this.phase = 0;
          this.modulation_phase = 0;
          this.modulation_frequency = 5;
          this.frequency = 440;
          this.modulation_depth = 10;
          this.sample_rate = context.sampleRate;
          this.amplitude = 0.5;
        }

        ModulatedOscillator.prototype.process = function(e) {
          var data_l, data_r, i, sample_i, _i, _ref, _results;
          data_l = e.outputBuffer.getChannelData(0);
          data_r = e.outputBuffer.getChannelData(1);
          _results = [];
          for (i = _i = 0, _ref = data_l.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
            sample_i = this.amplitude * Math.cos(this.phase + (this.modulation_depth * Math.sin(this.modulation_phase)));
            data_l[i] = sample_i;
            data_r[i] = sample_i;
            this.modulation_phase = this.modulation_phase + ((2 * Math.PI * this.modulation_frequency) / this.sample_rate);
            _results.push(this.phase = this.phase + ((2 * Math.PI * this.frequency) / this.sample_rate));
          }
          return _results;
        };

        ModulatedOscillator.prototype.on = function() {
          return this.node.connect(this.context.destination);
        };

        ModulatedOscillator.prototype.off = function() {
          return this.node.disconnect();
        };

        return ModulatedOscillator;

      })();
      audioContext = new webkitAudioContext;
      oscillator = new ModulatedOscillator(audioContext);
      on_off_switch = new SwitchView({
        el: '#switch'
      });
      frequency_knob = new KnobView({
        el: '#frequency',
        degMin: -53,
        degMax: 227,
        initial_value: (440 - 50) / (5000 - 50)
      });
      modulation_frequency_knob = new KnobView({
        el: '#modulation-frequency',
        initial_value: 0.5 / 50
      });
      modulation_depth_knob = new KnobView({
        el: '#modulation-depth',
        initial_value: 0.5 / 50
      });
      volume_knob = new KnobView({
        el: '#volume'
      });
      frequency_knob.on('valueChanged', function(v) {
        return oscillator.frequency = (5000 - 50) * v + 50;
      });
      modulation_frequency_knob.on('valueChanged', function(v) {
        return oscillator.modulation_frequency = 50 * v;
      });
      modulation_depth_knob.on('valueChanged', function(v) {
        return oscillator.modulation_depth = 50 * v;
      });
      volume_knob.on('valueChanged', function(v) {
        return oscillator.amplitude = v;
      });
      on_off_switch.on('on', function() {
        oscillator.on();
        return $('#bulb').removeClass('off').addClass('on');
      });
      return on_off_switch.on('off', function() {
        oscillator.off();
        return $('#bulb').removeClass('on').addClass('off');
      });
    });
  });

}).call(this);
