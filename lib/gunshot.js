// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  require(["jquery", "backbone", "knob", "switch"], function($, Backbone, KnobView, SwitchView) {
    return $(document).ready(function() {
      var ControlView, Envelope, Filter, WhiteNoise, audioContext, convolver, distance_knob, envelope, filter, gainDry, gainWet, impulseBuffer, merger1, multi_fire_switch, noise, rate_of_fire_knob, request, trigger, volume_knob,
        _this = this;
      if (typeof webkitAudioContext === 'undefined' && typeof AudioContext === 'undefined') {
        alert('Your browser does not support the Web Audio API. Try Google Chrome or a Webkit nightly build');
      }
      WhiteNoise = (function() {

        function WhiteNoise(context) {
          var self;
          self = this;
          this.context = context;
          this.node = this.context.createJavaScriptNode(1024, 1, 2);
          this.node.onaudioprocess = function(e) {
            return self.process(e);
          };
        }

        WhiteNoise.prototype.process = function(e) {
          var data0, data1, i, _i, _ref, _results;
          data0 = e.outputBuffer.getChannelData(0);
          data1 = e.outputBuffer.getChannelData(1);
          _results = [];
          for (i = _i = 0, _ref = data0.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
            data0[i] = (Math.random() * 2) - 1;
            _results.push(data1[i] = data0[i]);
          }
          return _results;
        };

        return WhiteNoise;

      })();
      Filter = (function() {

        function Filter(context) {
          var self;
          self = this;
          this.context = context;
          this.node = this.context.createBiquadFilter();
          this.node.type = 0;
          this.node.Q.value = 10;
          this.node.frequency.value = 800;
        }

        Filter.prototype.setFrequency = function(frequency) {
          return this.node.frequency.value = frequency;
        };

        return Filter;

      })();
      Envelope = (function() {

        function Envelope(context) {
          var self;
          self = this;
          this.context = context;
          this.node = this.context.createGainNode();
          this.node.gain.value = 0;
        }

        Envelope.prototype.impulse = function() {
          this.node.gain.linearRampToValueAtTime(0, this.context.currentTime);
          this.node.gain.linearRampToValueAtTime(1, this.context.currentTime + 0.001);
          this.node.gain.linearRampToValueAtTime(0.3, this.context.currentTime + 0.101);
          return this.node.gain.linearRampToValueAtTime(0, this.context.currentTime + 0.300);
        };

        return Envelope;

      })();
      ControlView = (function(_super) {

        __extends(ControlView, _super);

        function ControlView() {
          return ControlView.__super__.constructor.apply(this, arguments);
        }

        ControlView.prototype.el = $("#controls");

        ControlView.prototype.initialize = function(filter, envelope, gainDry, gainWet, audioContext) {
          this.filter = filter;
          this.envelope = envelope;
          this.gainDry = gainDry;
          this.gainWet = gainWet;
          return this.audioContext = audioContext;
        };

        ControlView.prototype.events = {
          "click #fire": "fire",
          "change #levelDry": "changeLevelDry",
          "change #levelWet": "changeLevelWet",
          "change #distance": "changeDistance"
        };

        ControlView.prototype.fire = function() {
          return this.envelope.impulse();
        };

        ControlView.prototype.changeLevelDry = function() {
          this.gainDry.gain.value = event.target.value;
          return console.log(event.target.value);
        };

        ControlView.prototype.changeLevelWet = function() {
          this.gainWet.gain.value = event.target.value;
          return console.log(event.target.value);
        };

        ControlView.prototype.changeDistance = function() {
          return this.filter.setFrequency(event.target.value);
        };

        return ControlView;

      })(Backbone.View);
      audioContext = new webkitAudioContext;
      filter = new Filter(audioContext);
      noise = new WhiteNoise(audioContext);
      envelope = new Envelope(audioContext);
      gainDry = audioContext.createGainNode();
      gainWet = audioContext.createGainNode();
      merger1 = audioContext.createChannelMerger();
      impulseBuffer = null;
      convolver = audioContext.createConvolver();
      request = new XMLHttpRequest();
      request.open('GET', '/audio/bright_plate.wav', true);
      request.responseType = 'arraybuffer';
      request.onload = function() {
        var onerror, onsuccess;
        onsuccess = function(buffer) {
          impulseBuffer = buffer;
          return convolver.buffer = impulseBuffer;
        };
        onerror = function() {
          return alert("Could not load " + self.url);
        };
        return audioContext.decodeAudioData(request.response, onsuccess, onerror);
      };
      request.send();
      noise.node.connect(envelope.node);
      envelope.node.connect(filter.node);
      filter.node.connect(gainDry);
      filter.node.connect(convolver);
      convolver.connect(gainWet);
      gainDry.connect(merger1);
      gainWet.connect(merger1);
      merger1.connect(audioContext.destination);
      new ControlView(filter, envelope, gainDry, gainWet, audioContext);
      volume_knob = new KnobView({
        el: '#volume'
      });
      rate_of_fire_knob = new KnobView({
        el: '#rate-of-fire'
      });
      distance_knob = new KnobView({
        el: '#distance'
      });
      multi_fire_switch = new SwitchView({
        el: '#multi-fire'
      });
      trigger = $('#trigger');
      volume_knob.on('valueChanged', function(v) {
        return console.log(v);
      });
      distance_knob.on('valueChanged', function(v) {
        return console.log(v);
      });
      rate_of_fire_knob.on('valueChanged', function(v) {
        return console.log(v);
      });
      return trigger.click(function() {
        return envelope.impulse();
      });
    });
  });

}).call(this);
