// Generated by CoffeeScript 1.3.3
(function() {

  require(["jquery", "backbone", "knob", "switch"], function($, Backbone, KnobView, SwitchView) {
    return $(document).ready(function() {
      var MachineView, Player, audioContext, machine1_view, machine2_view, machine3_view, player1, player2, player3;
      if (typeof webkitAudioContext === 'undefined' && typeof AudioContext === 'undefined') {
        alert('Your browser does not support the Web Audio API. Try Google Chrome or a Webkit nightly build');
      }
      audioContext = new webkitAudioContext;
      Player = (function() {

        function Player(url) {
          this.url = url;
          this.loadBuffer();
          this.setBaseSpeed(1);
          this.setSpeedFine(1);
        }

        Player.prototype.play = function() {
          if (this.buffer) {
            this.source = audioContext.createBufferSource();
            this.source.buffer = this.buffer;
            this.source.connect(audioContext.destination);
            this.source.loop = true;
            this.setSpeed();
            return this.source.noteOn(0);
          }
        };

        Player.prototype.stop = function() {
          if (this.buffer && this.source) {
            return this.source.noteOff(0);
          }
        };

        Player.prototype.setBaseSpeed = function(speed) {
          this.base_speed = speed;
          return this.setSpeed();
        };

        Player.prototype.setSpeedFine = function(speed) {
          this.fine_speed = speed;
          return this.setSpeed();
        };

        Player.prototype.setSpeed = function() {
          if (this.source) {
            return this.source.playbackRate.value = this.base_speed * this.fine_speed;
          }
        };

        Player.prototype.loadBuffer = function() {
          var request, self,
            _this = this;
          self = this;
          request = new XMLHttpRequest();
          request.open('GET', this.url, true);
          request.responseType = 'arraybuffer';
          request.onload = function() {
            var onerror, onsuccess;
            onsuccess = function(buffer) {
              return self.buffer = buffer;
            };
            onerror = function() {
              return alert("Could not load " + this.url);
            };
            return audioContext.decodeAudioData(request.response, onsuccess, onerror);
          };
          return request.send();
        };

        return Player;

      })();
      MachineView = (function() {

        function MachineView(el, player) {
          this.el = el;
          this.player = player;
          this.setupDoubleSpeed();
          this.setupFineSpeed();
          this.setupPlayStop();
        }

        MachineView.prototype.setupDoubleSpeed = function() {
          var double_speed_control,
            _this = this;
          double_speed_control = new SwitchView({
            el: $(this.el).find('.double-speed')
          });
          double_speed_control.on('on', function() {
            return _this.player.setBaseSpeed(2);
          });
          return double_speed_control.on('off', function() {
            return _this.player.setBaseSpeed(1);
          });
        };

        MachineView.prototype.setupFineSpeed = function() {
          var fine_speed_control,
            _this = this;
          fine_speed_control = new KnobView({
            el: $(this.el).find('.fine-speed')
          });
          return fine_speed_control.on('valueChanged', function(v) {
            var speed;
            speed = v * (1.03 - 0.97) + 0.97;
            return _this.player.setSpeedFine(speed);
          });
        };

        MachineView.prototype.setupPlayStop = function() {
          var play_stop_control,
            _this = this;
          play_stop_control = new SwitchView({
            el: $(this.el).find('.play')
          });
          play_stop_control.on('on', function() {
            return _this.player.play();
          });
          return play_stop_control.on('off', function() {
            return _this.player.stop();
          });
        };

        return MachineView;

      })();
      player1 = new Player('/audio/delia_loop_01.ogg');
      player2 = new Player('/audio/delia_loop_02.ogg');
      player3 = new Player('/audio/delia_loop_03.ogg');
      machine1_view = new MachineView('#machine1', player1);
      machine2_view = new MachineView('#machine2', player2);
      return machine3_view = new MachineView('#machine3', player3);
    });
  });

}).call(this);
